# GNOME-family file manager integration targets
# Supports Nautilus (Files), Nemo, Caja, and Thunar

# Ensured GNOME install sets execute bits where needed:
# Nautilus scripts: gnome-install now chmod +x’s every linked script in ~/.local/share/nautilus/scripts, including names with spaces, plus the common/gnome_selection_to_paths.sh helper in the same target directory.
# Wrapper: ydmenu-gnome-wrapper is included in the scripts loop, so it’s executable after install.
# Python extensions (Nautilus/Nemo/Caja) are linked; no execute bit required.
# Nemo/Caja actions are data files; no execute bit required.
# Main Makefile already ensures ydmenu.py, setup.py, and ydmenu-py-env are executable.
# Verified via dry-run of the installer to confirm the chmod/link steps are present.
# Notes:
# Thunar flow uses XML actions; no executables are required there.

# Define directory paths (they're set by user-specific directories)
GNOME_SCRIPTS_DIR = ~/.local/share/nautilus/scripts
NEMO_ACTIONS_DIR = ~/.local/share/nemo/actions
CAJA_ACTIONS_DIR = ~/.local/share/file-manager/actions

# Python extension directories
NAUTILUS_EXT_DIR = ~/.local/share/nautilus-python/extensions
NEMO_EXT_DIR = ~/.local/share/nemo-python/extensions
CAJA_EXT_DIR = ~/.local/share/caja-python/extensions

# Thunar custom actions
THUNAR_UCA = ~/.config/Thunar/uca.xml

# ===== Scripts & Actions Installation =====

gnome-install: ## Install scripts/actions for all GNOME file managers (Nautilus, Nemo, Caja, Thunar)
	@echo "Installing GNOME scripts and actions..."
	@# Install Nautilus scripts
	@echo "Installing Nautilus scripts..."
	@mkdir -p "$(GNOME_SCRIPTS_DIR)"
	@for f in gnome/scripts/*; do \
	  [ -f "$$f" ] || continue; \
	  ln -sf "$(PWD)/$$f" "$(GNOME_SCRIPTS_DIR)/$$(basename "$$f")"; \
	  chmod +x "$(GNOME_SCRIPTS_DIR)/$$(basename "$$f")"; \
	  echo "Linked: $(GNOME_SCRIPTS_DIR)/$$(basename "$$f")"; \
	done
	@# Ensure common helper is available and executable for scripts
	@mkdir -p "$(GNOME_SCRIPTS_DIR)/common"
	@ln -sf "$(PWD)/gnome/scripts/common/gnome_selection_to_paths.sh" "$(GNOME_SCRIPTS_DIR)/common/gnome_selection_to_paths.sh"
	@chmod +x "$(GNOME_SCRIPTS_DIR)/common/gnome_selection_to_paths.sh"
	@echo "Linked: $(GNOME_SCRIPTS_DIR)/common/gnome_selection_to_paths.sh"
	@# Install Nemo actions
	@if command -v nemo >/dev/null 2>&1; then \
	  echo "Installing Nemo actions..."; \
	  mkdir -p "$(NEMO_ACTIONS_DIR)"; \
	  for f in gnome/nemo/actions/*.nemo_action; do \
	    [ -f "$$f" ] || continue; \
	    ln -sf "$(PWD)/$$f" "$(NEMO_ACTIONS_DIR)/$$(basename "$$f")"; \
	    echo "Linked: $(NEMO_ACTIONS_DIR)/$$(basename "$$f")"; \
	  done; \
	else \
	  echo "Nemo not detected; skipping Nemo actions."; \
	fi
	@# Install Caja actions
	@if command -v caja >/dev/null 2>&1; then \
	  echo "Installing Caja actions..."; \
	  mkdir -p "$(CAJA_ACTIONS_DIR)"; \
	  for f in gnome/caja/actions/*.desktop; do \
	    [ -f "$$f" ] || continue; \
	    ln -sf "$(PWD)/$$f" "$(CAJA_ACTIONS_DIR)/$$(basename "$$f")"; \
	    echo "Linked: $(CAJA_ACTIONS_DIR)/$$(basename "$$f")"; \
	  done; \
	else \
	  echo "Caja not detected; skipping Caja actions."; \
	fi
	@# Install Thunar custom actions
	@if command -v thunar >/dev/null 2>&1; then \
	  echo "Installing Thunar actions..."; \
	  mkdir -p "$(HOME)/.config/Thunar"; \
	  if [ -f "$(THUNAR_UCA)" ]; then \
	    awk 'BEGIN{del=0} /<!-- YADISK-START -->/{del=1} !del{print} /<!-- YADISK-END -->/{del=0}' "$(THUNAR_UCA)" > "$(THUNAR_UCA).tmp" && mv "$(THUNAR_UCA).tmp" "$(THUNAR_UCA)"; \
	  else \
	    echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<actions>\n</actions>" > "$(THUNAR_UCA)"; \
	  fi; \
	  awk '/^<\/actions>/ {print "<!-- YADISK-START -->"; system("cat gnome/thunar/uca_fragment.xml"); print "<!-- YADISK-END -->"; print; next} 1' "$(THUNAR_UCA)" > "$(THUNAR_UCA).tmp" && mv "$(THUNAR_UCA).tmp" "$(THUNAR_UCA)"; \
	  echo "Linked: $(THUNAR_UCA) (merged fragment)"; \
	else \
	  echo "Thunar not detected - skipping Thunar actions"; \
	fi
	@echo "GNOME scripts installation complete. Restart Files/Nemo/Caja/Thunar to load changes."

gnome-uninstall:  ## Remove GNOME scripts/actions from all file managers
	@echo "Removing GNOME scripts and actions..."
	@# Remove Nautilus scripts
	@for f in gnome/scripts/*; do \
	  [ -f "$$f" ] || continue; \
	  rm -f "$(GNOME_SCRIPTS_DIR)/$$(basename "$$f")"; \
	  echo "Removed: $(GNOME_SCRIPTS_DIR)/$$(basename "$$f")"; \
	done
	@# Remove Nemo actions
	@for f in gnome/nemo/actions/*.nemo_action; do \
	  [ -f "$$f" ] || continue; \
	  rm -f "$(NEMO_ACTIONS_DIR)/$$(basename "$$f")"; \
	  echo "Removed: $(NEMO_ACTIONS_DIR)/$$(basename "$$f")"; \
	done
	@# Remove Caja actions
	@for f in gnome/caja/actions/*.desktop; do \
	  [ -f "$$f" ] || continue; \
	  rm -f "$(CAJA_ACTIONS_DIR)/$$(basename "$$f")"; \
	  echo "Removed: $(CAJA_ACTIONS_DIR)/$$(basename "$$f")"; \
	done
	@# Remove Thunar actions
	@if [ -f "$(THUNAR_UCA)" ]; then \
	  awk 'BEGIN{del=0} /<!-- YADISK-START -->/{del=1} !del{print} /<!-- YADISK-END -->/{del=0}' "$(THUNAR_UCA)" > "$(THUNAR_UCA).tmp" && mv "$(THUNAR_UCA).tmp" "$(THUNAR_UCA)"; \
	  echo "Removed Thunar actions from $(THUNAR_UCA)"; \
	else \
	  echo "Thunar configuration file not found."; \
	fi
	@echo "GNOME scripts uninstall complete."

gnome-status:  ## Show GNOME scripts installation status
	@echo "=== GNOME Scripts/Actions Status ==="
	@echo "Nautilus Scripts:"
	@for f in gnome/scripts/*; do \
	  [ -f "$$f" ] || continue; \
	  dest="$(GNOME_SCRIPTS_DIR)/$$(basename "$$f")"; \
	  if [ -L "$$dest" ]; then echo "  $$(basename "$$f"): ✓ Linked"; \
	  elif [ -x "$$dest" ]; then echo "  $$(basename "$$f"): ✓ Present (copied)"; \
	  else echo "  $$(basename "$$f"): ✗ Not installed"; fi; \
	done
	@echo "Nemo Actions:"
	@for f in gnome/nemo/actions/*.nemo_action; do \
	  [ -f "$$f" ] || continue; \
	  dest="$(NEMO_ACTIONS_DIR)/$$(basename "$$f")"; \
	  if [ -L "$$dest" ]; then echo "  $$(basename "$$f"): ✓ Linked"; \
	  elif [ -f "$$dest" ]; then echo "  $$(basename "$$f"): ✓ Present"; \
	  else echo "  $$(basename "$$f"): ✗ Not installed"; fi; \
	done
	@echo "Caja Actions:"
	@for f in gnome/caja/actions/*.desktop; do \
	  [ -f "$$f" ] || continue; \
	  dest="$(CAJA_ACTIONS_DIR)/$$(basename "$$f")"; \
	  if [ -L "$$dest" ]; then echo "  $$(basename "$$f"): ✓ Linked"; \
	  elif [ -f "$$dest" ]; then echo "  $$(basename "$$f"): ✓ Present"; \
	  else echo "  $$(basename "$$f"): ✗ Not installed"; fi; \
	done
	@echo "Thunar Actions:"
	@if [ -f "$(THUNAR_UCA)" ] && grep -q "YADISK-START" "$(THUNAR_UCA)"; then \
	  echo "  Thunar actions: ✓ Present"; \
	else \
	  echo "  Thunar actions: ✗ Not installed"; \
	fi

# ===== Python Extensions =====

gnome-ext-install: ## Install all available Python extensions (Nautilus, Nemo, Caja)
	@echo "Installing GNOME Python extensions..."
	@# Install Nautilus extension
	@if python3 -c "import gi; from gi.repository import Nautilus" >/dev/null 2>&1; then \
	  echo "  Installing Nautilus Python extension..."; \
	  mkdir -p "$(NAUTILUS_EXT_DIR)"; \
	  ln -sf "$(PWD)/gnome/nautilus/ydmenu_nautilus.py" "$(NAUTILUS_EXT_DIR)/ydmenu_nautilus.py"; \
	  echo "  Linked: $(NAUTILUS_EXT_DIR)/ydmenu_nautilus.py"; \
	  echo "  Restarting Nautilus (Files)..."; \
	  nautilus -q || true; \
	else \
	  echo "  python3-nautilus not available - skipping Nautilus extension"; \
	fi
	@# Install Nemo extension
	@if python3 -c "import gi; from gi.repository import Nemo" >/dev/null 2>&1; then \
	  echo "  Installing Nemo Python extension..."; \
	  mkdir -p "$(NEMO_EXT_DIR)"; \
	  ln -sf "$(PWD)/gnome/nemo/ydmenu_nemo.py" "$(NEMO_EXT_DIR)/ydmenu_nemo.py"; \
	  echo "  Linked: $(NEMO_EXT_DIR)/ydmenu_nemo.py"; \
	  echo "  Restarting Nemo..."; \
	  nemo -q || true; \
	else \
	  echo "  python3-nemo not available - skipping Nemo extension"; \
	fi
	@# Install Caja extension
	@if python3 -c "import gi; from gi.repository import Caja" >/dev/null 2>&1; then \
	  echo "  Installing Caja Python extension..."; \
	  mkdir -p "$(CAJA_EXT_DIR)"; \
	  ln -sf "$(PWD)/gnome/caja/ydmenu_caja.py" "$(CAJA_EXT_DIR)/ydmenu_caja.py"; \
	  echo "  Linked: $(CAJA_EXT_DIR)/ydmenu_caja.py"; \
	  echo "  Restarting Caja..."; \
	  caja -q || true; \
	else \
	  echo "  python3-caja not available - skipping Caja extension"; \
	fi
	@echo "Python extensions installation complete."

gnome-ext-uninstall: ## Remove all Python extensions (Nautilus, Nemo, Caja)
	@echo "Removing GNOME Python extensions..."
	@rm -f "$(NAUTILUS_EXT_DIR)/ydmenu_nautilus.py" && echo "  Removed: $(NAUTILUS_EXT_DIR)/ydmenu_nautilus.py" || true
	@rm -f "$(NEMO_EXT_DIR)/ydmenu_nemo.py" && echo "  Removed: $(NEMO_EXT_DIR)/ydmenu_nemo.py" || true
	@rm -f "$(CAJA_EXT_DIR)/ydmenu_caja.py" && echo "  Removed: $(CAJA_EXT_DIR)/ydmenu_caja.py" || true
	@echo "Python extensions removal complete."

gnome-ext-status: ## Show all Python extension installation status
	@echo "=== Python Extensions Status ==="
	@if [ -f "$(NAUTILUS_EXT_DIR)/ydmenu_nautilus.py" ]; then \
	  echo "Nautilus extension: ✓ Present"; \
	else \
	  echo "Nautilus extension: ✗ Not installed"; \
	fi
	@if [ -f "$(NEMO_EXT_DIR)/ydmenu_nemo.py" ]; then \
	  echo "Nemo extension: ✓ Present"; \
	else \
	  echo "Nemo extension: ✗ Not installed"; \
	fi
	@if [ -f "$(CAJA_EXT_DIR)/ydmenu_caja.py" ]; then \
	  echo "Caja extension: ✓ Present"; \
	else \
	  echo "Caja extension: ✗ Not installed"; \
	fi

# ===== Help =====

gnome-help: ## Show GNOME integration help
	@echo ""
	@echo "Configuration:"
	@echo "  make configure          Auto-detect desktop and configure (recommended)"
	@echo "  make configure-skip-env Auto-detect desktop, skip environment variables"
	@echo ""
	@echo "GNOME Integration:"
	@echo "  make gnome-install      Install scripts/actions for all file managers (Nautilus, Nemo, Caja, Thunar)"
	@echo "  make gnome-uninstall    Remove scripts/actions from all file managers"
	@echo "  make gnome-status       Show scripts/actions status for all file managers"
	@echo "  make gnome-ext-install  Install Python extensions for all supported file managers"
	@echo "  make gnome-ext-uninstall Remove Python extensions from all file managers"
	@echo "  make gnome-ext-status   Show Python extensions status for all file managers"
	@echo ""
